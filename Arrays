🔷 Topic 1: What is an Array?

        🔸 Definition:
                  Array ek fixed-size container hota hai jisme same type ke elements sequentially store hote hain in contiguous memory locations.
                  Array is fixed-size container, in which elements are squentially arrenged in contiguous memory locations....
        
        🔸 Example:
                    int[] arr = {10, 20, 30, 40, 50};
                    arr[0] = 10, arr[1] = 20, ... and so on
        
                    Size fix hai (5 elements)
        
        Memory me ek line me store hote hain: [10][20][30][40][50]
        
        
        🔹 Features:
                Feature	Description
                ✅ Fixed Size	Once declared, can't be changed
                ✅ Indexed	Access by index (O(1) time)
                ✅ Homogeneous	All elements same data type
                ✅ Contiguous Memory	Speedy access
        
        🔹 Why Array is Powerful?    
                Fast access: arr[i] = O(1)




🔷 Topic 2: Array Memory & Indexing

          🧠 How index works in memory?
              Suppose:
          
                      int[] arr = {100, 200, 300};
                      Let’s say:
                      
                      arr[0] is stored at memory 1000
                      
                      Integer takes 4 bytes

                Then:
                    Index	 Value	 Memory
                      0	    100	    1000
                      1	    200	    1004
                      2	    300	    1008

              If you want to know address of any index, then this is the formula - 
                      Address of arr[i] = Base address + (i * size of datatype)




🔷 Topic 3: Operations on Array

        1. Traversal
              Print all elements (Left to Right)

              // using mannual looping....
                for (int i = 0; i < arr.length; i++) 
                {
                    System.out.println(arr[i]);
                }

              // using for-each loop...
                for (int i : arr) 
                {
                    System.out.println(i);
                }

        2. Insertion
              ❌ Not dynamic, so insert is manual shifting:
              
                  // Insert 999 at index 2 in [10, 20, 30, 40]
                  // → [10, 20, 999, 30, 40]
        
        3. Deletion
          Same — needs shifting of elements

        4. Search
            Linear Search: O(n)
            Binary Search (sorted arrays): O(log n)
            etc....



🔷 Topic 4: When to Use Array?

        Use Arrays when:
        
                Size is known in advance
                
                Access speed is priority
                
                Data is homogeneous


        Don’t use arrays if:
        
                Size is dynamic (→ Use ArrayList)
                
                Frequent insert/delete from middle (→ Use LinkedList)
                          




