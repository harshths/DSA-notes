📚 3. Algorithmic Complexity
Understand how to measure the efficiency of your code:

Asymptotic Notation

Big O Notation

Big-θ (Theta) Notation

Big-Ω (Omega) Notation

Common Runtimes

Constant – O(1)

Logarithmic – O(log n)

Linear – O(n)

Polynomial – O(n², O(n³), etc.)

Exponential – O(2ⁿ)

Factorial – O(n!)

Time vs Space Complexity

How to Calculate Complexity?

📦 4. Basic Data Structures
Start with these most commonly used structures:

Array

Linked List

Stack

Queue

Hash Table

🧮 5. Sorting Algorithms
Learn to arrange data in an efficient way:

Bubble Sort

Insertion Sort

Selection Sort

Merge Sort

Quick Sort

Heap Sort

🔍 6. Searching Algorithms
Efficient techniques to find data:

Linear Search

Binary Search

🌳 7. Tree Data Structures
Important hierarchical structures:

Binary Tree

Binary Search Tree (BST)

AVL Tree

B-Tree

📈 Tree Traversals:
In-Order Traversal

Pre-Order Traversal

Post-Order Traversal

🌐 8. Graph Data Structure
For representing networks:

Directed Graph

Undirected Graph

🔎 Graph Search Algorithms:
Breadth First Search (BFS)

Depth First Search (DFS)

📏 Shortest Path Algorithms:
Dijkstra's Algorithm

Bellman-Ford Algorithm

🌲 Minimum Spanning Tree:
Prim's Algorithm

Kruskal's Algorithm

🔧 9. Advanced Data Structures
Used in more complex problem solving:

Trie

Segment Tree

Fenwick Tree (Binary Indexed Tree)

Disjoint Set (Union-Find)

Suffix Trees and Arrays

🧠 10. Complex Data Structures
Used in indexing, databases, and more:

B/B+ Trees

2-3 Trees

ISAM (Indexed Sequential Access Method)

Skip List

📁 11. Indexing Techniques
Mostly used in databases and file systems:

Linear Indexing

Tree-Based Indexing

🧩 12. Problem Solving Techniques
Master these techniques to crack coding interviews:

Brute Force

Greedy Algorithms

Divide and Conquer

Dynamic Programming

Backtracking

Randomized Algorithms

Recursion

Two Pointer Technique

Sliding Window Technique
